name: Deploy Django to EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.x"

      - name: Set up SSH for EC2 access
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      - name: Add EC2 Host to Known Hosts
        run: |
          ssh-keyscan -H ${{ secrets.EC2_PUBLIC_IP }} >> ~/.ssh/known_hosts

      - name: Build Docker Image
        run: |
          docker build --no-cache -t roshanpaul/manasu .

      - name: Push Docker Image to Docker Hub
        run: |
          echo "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin
          docker push roshanpaul/manasu

      - name: Deploy to EC2
        run: |
          echo "${{ secrets.EC2_PRIVATE_KEY }}" > ec2_key.pem
          chmod 400 ec2_key.pem

          # SSH into EC2 and deploy
          ssh -o StrictHostKeyChecking=no -i ec2_key.pem ubuntu@${{ secrets.EC2_PUBLIC_IP }} << 'EOF'
            sudo apt-get update
            
            if ! command -v docker &> /dev/null; then
              sudo apt-get install -y docker.io docker-compose
              sudo systemctl start docker
              sudo systemctl enable docker
            fi

                  # Define container and image names
            CONTAINER_NAME="manasu_container"
            IMAGE_NAME="roshanpaul/manasu"

            # Stop and remove the container if it exists
            if [ $(docker ps -q -f name=$CONTAINER_NAME) ]; then
                echo "Stopping container: $CONTAINER_NAME"
                sudo docker stop $CONTAINER_NAME
            fi

            if [ $(docker ps -aq -f name=$CONTAINER_NAME) ]; then
                echo "Removing container: $CONTAINER_NAME"
                sudo docker rm $CONTAINER_NAME
            fi

            # Remove the image if it exists
            if [ $(docker images -q $IMAGE_NAME) ]; then
                echo "Removing image: $IMAGE_NAME"
                sudo docker rmi $IMAGE_NAME
            fi

            # Pull the latest version of the image
            echo "Pulling the latest image: $IMAGE_NAME"
            sudo docker pull $IMAGE_NAME

            # Run the container with the specified name and port mapping
            echo "Running container: $CONTAINER_NAME"
            sudo docker run -d --name $CONTAINER_NAME -p 80:8000 $IMAGE_NAME


            echo "Static files collected and container running."
            EOF

      - name: Clean up SSH key
        run: rm ec2_key.pem
