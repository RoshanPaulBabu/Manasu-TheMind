name: Deploy Django to EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    - name: Set up SSH for EC2 access
      uses: webfactory/ssh-agent@v0.5.3
      with:
        ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

    - name: Add EC2 Host to Known Hosts
      run: |
        ssh-keyscan -H ${{ secrets.EC2_PUBLIC_IP }} >> ~/.ssh/known_hosts

    - name: Build Docker Image
      run: |
        docker build --no-cache -t roshanpaul/manasu .

    - name: Push Docker Image to Docker Hub
      run: |
        echo "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin
        docker push roshanpaul/manasu 

    - name: Deploy to EC2
      run: |
        # Save the EC2 private key to a file
        echo "${{ secrets.EC2_PRIVATE_KEY }}" > ec2_key.pem
        chmod 400 ec2_key.pem
        
        # SSH into EC2 and deploy
        ssh -o StrictHostKeyChecking=no -i ec2_key.pem ubuntu@${{ secrets.EC2_PUBLIC_IP }} << 'EOF'
          # Update package index and install Docker if needed
          sudo apt-get update
          if ! command -v docker &> /dev/null; then
            sudo apt-get install -y docker.io docker-compose
            sudo systemctl start docker
            sudo systemctl enable docker
          fi

          # Login to Docker Hub on EC2
          docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" -p "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}"

          # Check if any container is running with the image 'roshanpaul/manasu'
          CONTAINER_ID=$(docker ps -q --filter "ancestor=roshanpaul/manasu")

          if [ -n "$CONTAINER_ID" ]; then
            echo "Container is running with image 'roshanpaul/manasu'. Stopping the container..."
            # Stop the container
            sudo docker stop "$CONTAINER_ID"

            echo "Removing the container..."
            # Remove the container
            sudo docker rm "$CONTAINER_ID"
          else
            echo "No running container found with image 'roshanpaul/manasu'."
          fi

          # Check if the image exists
          IMAGE_ID=$(docker images -q roshanpaul/manasu)

          if [ -n "$IMAGE_ID" ]; then
            echo "Removing the Docker image 'roshanpaul/manasu'..."
            # Remove the image
            sudo docker rmi "$IMAGE_ID"
          else
            echo "No Docker image found for 'roshanpaul/manasu'."
          fi

          # Pull the latest version of the image
          docker pull roshanpaul/manasu

          # Create and run a new container from the image 'roshanpaul/manasu'
          echo "Creating a new container from the image 'roshanpaul/manasu'..."
          sudo docker run -d -p 80:8000 roshanpaul/manasu

          echo "Container created and running."
        EOF

    - name: Clean up SSH key
      run: rm ec2_key.pem
